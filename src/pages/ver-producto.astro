---
// Layout
import Layout from "../layouts/Layout.astro";

---

<Layout title="Ver producto">
    <style lang="scss">
        // Variables de estilos
        @use "../styles/variables/metrics";
        @use "../styles/variables/colors";

        .container {
            max-width: metrics.$container-max-width;
            margin: 4rem auto;
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            grid-column-gap: 1rem;

            .text {
                .product-title {
                    font-weight: 400;
                    margin-bottom: 1rem;
                }

                .product-price-title {
                    font-size: 24px;
                    display: block;
                    margin-block-end: 1rem;
                }

                .product-about-title {
                    font-size: 18px;
                    font-weight: 600;
                    margin-bottom: 1rem;
                }

                .product-about-description {
                    p {
                        margin-block-end: 1rem;
                    }
                }

                .buttons {
                    display: flex;
                    max-width: fit-content;
                    gap: 1rem;

                    .add-button {
                        display: block;
                        text-decoration: none;
                        color: #fff;
                        font-weight: 800;
                        padding: 1rem 2rem;
                        background-color: #7bad69;
                        border-radius: 2rem;
                        transition: background-color 200ms ease-in-out;

                        &:hover {
                            background-color: #5f8f4f;
                        }
                    }
                }
            }

            aside {
                border: 2px solid #20202050;
                border-radius: 0.5rem;
                padding: 1.5rem;
                height: fit-content;

                .aside-status-title {
                    font-size: 18px;
                    font-weight: 500;
                    margin-block-end: 1.2rem;
                }

                .aside-buy-link {
                    margin: auto;
                }
            }
        }

        .modal {
            display: none;
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 10; // Para que esté por encima de todo
            background-color: hsla(0, 0%, 0%, 0.5);

            &.visible {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .content {

                border-radius: 1rem;
                background-color: white;
                max-width: 60ch;
                padding: 2rem;

                .header {
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 1rem;

                    .modal-close {
                        cursor: pointer;
                        display: block;
                        text-align: right;
                    }
                }

                form {
                    display: flex;
                    flex-direction: column;

                    & > * {
                        margin-bottom: 1rem;
                    }

                    button {
                        border: none;
                        display: block;
                        text-decoration: none;
                        color: #fff;
                        font-weight: 800;
                        font-size: inherit;
                        padding: 1rem 2rem;
                        background-color: #7bad69;
                        border-radius: 2rem;
                        transition: background-color 200ms ease-in-out;
                        margin-bottom: 0;

                        &:hover {
                            background-color: #5f8f4f;
                        }
                    }
                }
            }
        }

        // Elimina los borders del input cuando está enfocado
        input:focus, input {
            border: none;
            outline: none;
        }

        input {
            border-bottom: 0.2rem solid #20202050;
            border-radius: 0.5rem;
            padding: 1rem;
            font-family: inherit;
            font-size: 1.2rem;
            background-color: hsl(0, 0%, 90%);
        }
        
    </style>

    <div class="container">
        <img src="/jergon_sacha_producto.jpg" alt="Galletas de Sacha Jergon" />

        <div class="text">
            <h1 class="product-title">Galletas Sacha Jergón</h1>

            <span class="product-price-title">s/. 9.99</span>

            <h2 class="product-about-title">Sobre este artículo</h2>

            <section class="product-about-description">
                <p>
                    ¿Qué hace a nuestras galletas tan especiales? El Sacha
                    Jergón, una planta amazónica llena de propiedades
                    saludables, es el ingrediente estrella. Estas galletas son
                    una fuente natural de energía, proporcionándote el impulso
                    necesario para afrontar tu día.
                </p>
                <p>
                    Además, el Sacha Jergón contiene antioxidantes poderosos que
                    ayudan a fortalecer tu sistema inmunológico y proteger tu
                    cuerpo contra los radicales libres. ¡Una manera deliciosa de
                    cuidar de ti mismo!
                </p>
            </section>

            <div class="buttons">
                <span class="add-button" id="open-modal">
                    Agregar al carrito
                </span>
            </div>
        </div>

        <aside>
            <h3 class="aside-status-title">Estado: En stock</h3>

            <section class="aside-description">
                <p>
                    Enviós a todas las partes del Perú. Los envíos locales son
                    gratuitos.
                </p>
            </section>
        </aside>
    </div>

    <!-- Modal -->
    <div class="modal" id="modal">
        <div class="content">
            <div class="header">
                <h3>Antes de proceder...</h3>

                <span
                    role="button"
                    id="close-modal"
                    class="modal-close material-symbols-outlined"
                >
                    close</span
                >
            </div>
            <form>
                <label for="amount"
                    >¿Cuantas galletas deseas comprar? (Máximo de 10)</label
                >
                <input
                    type="number"
                    name="amount"
                    id="amount"
                    max="10"
                    value="1"
                />
                <p>Total: s/. <span id="amount-selected">0</span></p>
                <button id="add-to-cart">Agregar</button>
            </form>
        </div>
    </div>
</Layout>

<script>
    // Modulos gracias a Typescript :D
    import { addLocalStorage } from "../utils/localStorage.js";

    // Declarativo debido a Typescript -_-'
    // HTMLInputElement y HTMLFormElement es un tipo de dato de Typescript, lo use debido a que daba errores al usar el método value y otros.
    const modal: HTMLInputElement = document.getElementById(
        "modal"
    ) as HTMLInputElement;
    const openModal: HTMLInputElement = document.getElementById(
        "open-modal"
    ) as HTMLInputElement;
    const closeModal: HTMLInputElement = document.getElementById(
        "close-modal"
    ) as HTMLInputElement;
    const amount: HTMLInputElement = document.getElementById(
        "amount"
    ) as HTMLInputElement;
    const amountSelected: HTMLInputElement = document.getElementById(
        "amount-selected"
    ) as HTMLInputElement;
    const addToCart: HTMLInputElement = document.getElementById(
        "add-to-cart"
    ) as HTMLInputElement;
    const form: HTMLFormElement = document.querySelector(
        "form"
    ) as HTMLFormElement;
    const amountInput: HTMLInputElement = document.getElementById(
        "amount"
    ) as HTMLInputElement;
    // De tipo entero, ya que no puede haber medio pedido, por ejemplo: 1.5 galletas, 2.5 galletas, etc. Ya me imagino a la gente pidiendo medio pedido de galletas...
    const price: number = 9.99;

    // Actualiza el total de galletas seleccionadas al cargar la página
    // Orrendl el casting, pero es necesario debido a que Typescript no reconoce el método textContent
    amountSelected.textContent = String(Number(amountInput.value) * price);

    // Previene que la página se recargue al enviar el formulario
    form.addEventListener("submit", (e: Event) => {
        e.preventDefault();
    });

    // Abre el modal
    openModal.addEventListener("click", () => {
        modal.classList.add("visible");
    });

    // Cierra el modal
    closeModal.addEventListener("click", () => {
        modal.classList.remove("visible");
    });

    // Cierra el modal al hacer click fuera de el
    window.addEventListener("click", (e: Event) => {
        if (e.target === modal) {
            modal.classList.remove("visible");
        }
    });

    // Actualiza el total de galletas seleccionadas
    amount.addEventListener("input", (e: Event) => {
        // necesita ser tratado como HTMLInputElement para evitar errores de Typescript
        const target: HTMLInputElement = e.target as HTMLInputElement;
        // target.value es de tipo string, por lo que necesita ser convertido a número, pero tambien amountSelected.textContent es de tipo string, por lo que la operacion tiene que ser convertida a string: target.value -> number -> string.
        amountSelected.textContent = String(Number(target.value) * price);

        console.log(amountSelected.innerText);
    });

    // Agrega el producto al carrito
    form.addEventListener("submit", (e) => {
        e.preventDefault();

        const amountValue: number = parseInt(amountInput.value);

        // Agrega el producto al carrito
        // addLocalStorage espera dos argumentos, el primero es el nombre del item y el segundo es el nombre del producto
        // el producto debera ser un objeto con nombre y precio
        // addLocalStorage va dentro de un bucle que se repite segun cuantas galletas se hayan seleccionado el usuario
        for (let i = 0; i < amountValue; i++) {
            addLocalStorage("Carrito", {
                name: "Galletas Sacha Jergón",
                price: 9.99,
            });
        }

        // Después de 3 segundos, el botón vuelve a cerrar el modal
        setTimeout(() => {
            modal.classList.remove("visible");
        }, 3000);
    });
</script>
